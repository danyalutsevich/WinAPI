Hooks (Хуки)

Прием / способ организации кода
позволяющий вставлять свои процедуры в существующие,
образуя цепочку вызовов. Позже, подобный подход получил название MiddleWare

Прерывание клавиатуры -> BIOS (адрес обработчика) -X-> обработчик
									^					  ^
							заменяем на наш адрес		  |
							(старый сохраняем)			  |
									|					  |
								наш код		--- переход по старому адресу

									петля на схеме (англ. Hook) дала название этому приему

OC позволяет устанавливать (и отменять) хуки для ряда прерываний и сообщений.
WinAPI содержит предопределенные константы для работы с наиболее
популярными из них.


    kbHOOK = SetWindowsHookExW(  дескриптор хука, нужен для его включения
	WH_KEYBOARD, тип хука - предопределенная константа
	KbHookProc, адрес процедуры, которая встраивается в петлю
	(HINSTANCE)NULL, отсчет адреса
	GetCurrentThreadId()); номер потока

	return CallNextHookEx(kbHOOK,nCode,wParam,lParam); - замыкание петли - вызов следующего хука (предидущий адрес)

--------------------------------

	хуки низкого уровня (LL - LowLevel)

	kbLL = SetWindowsHookExW(WH_KEYBOARD_LL,
	KbHookProcLL,
	GetModuleHandle(NULL), // дескриптор модуля (DLL / EXE)
	0);

--------------------------

Мышь

typedef struct tagMOUSEHOOKSTRUCT {
  POINT     pt;
  HWND      hwnd;
  UINT      wHitTestCode;
  ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;


typedef struct tagPOINT {
  LONG x;
  LONG y;
} POINT, *PPOINT;

